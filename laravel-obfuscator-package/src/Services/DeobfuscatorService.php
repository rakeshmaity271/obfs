<?php

namespace LaravelObfuscator\LaravelObfuscator\Services;

use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Log;

class DeobfuscatorService
{
    private LicenseService $licenseService;

    public function __construct(LicenseService $licenseService)
    {
        $this->licenseService = $licenseService;
    }

    /**
     * Check license before deobfuscation
     */
    private function checkLicense(): void
    {
        if (!$this->licenseService->isValid()) {
            throw new \Exception('Invalid or expired license. Please check your LaravelObfuscator license.');
        }
    }
    /**
     * Deobfuscate a PHP file
     */
    public function deobfuscateFile(string $inputFile, string $outputFile = null): string
    {
        try {
            $this->checkLicense();
            
            if (!File::exists($inputFile)) {
                throw new \Exception("Input file not found: {$inputFile}");
            }
            
            $sourceCode = File::get($inputFile);
            $deobfuscatedCode = $this->deobfuscateString($sourceCode);
            
            if ($outputFile === null) {
                $outputFile = $this->generateDeobfuscatedOutputPath($inputFile);
            }
            
            if (File::put($outputFile, $deobfuscatedCode) === false) {
                throw new \Exception("Failed to write output file: {$outputFile}");
            }
            
            return $outputFile;
        } catch (\Exception $e) {
            Log::error('Deobfuscation error: ' . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Deobfuscate a PHP code string
     */
    public function deobfuscateString(string $obfuscatedCode): string
    {
        $this->checkLicense();
        
        // Try different deobfuscation techniques
        $deobfuscated = $this->tryBase64ReverseDeobfuscation($obfuscatedCode);
        
        if ($deobfuscated !== null) {
            return $deobfuscated;
        }
        
        $deobfuscated = $this->tryAdvancedDeobfuscation($obfuscatedCode);
        
        if ($deobfuscated !== null) {
            return $deobfuscated;
        }
        
        // If all techniques fail, return original with warning
        Log::warning('Could not deobfuscate code, returning original');
        return $obfuscatedCode;
    }

    /**
     * Try base64 reverse deobfuscation (our standard method)
     */
    private function tryBase64ReverseDeobfuscation(string $code): ?string
    {
        try {
            // Look for our wrapper pattern
            if (strpos($code, '// Obfuscated PHP Code - Generated by LaravelObfuscator') !== false) {
                // Extract the obfuscated string
                if (preg_match('/\$obfuscated = "([^"]+)";/', $code, $matches)) {
                    $obfuscatedString = $matches[1];
                    $reversed = strrev($obfuscatedString);
                    $decoded = base64_decode($reversed);
                    
                    if ($decoded !== false) {
                        return $decoded;
                    }
                }
            }
            
            return null;
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * Try advanced deobfuscation techniques
     */
    private function tryAdvancedDeobfuscation(string $code): ?string
    {
        try {
            // Try to detect and reverse variable name randomization
            $deobfuscated = $this->reverseVariableRandomization($code);
            
            // Try to decrypt strings
            $deobfuscated = $this->decryptStrings($deobfuscated);
            
            // Remove dead code
            $deobfuscated = $this->removeDeadCode($deobfuscated);
            
            // Remove anti-debugging code
            $deobfuscated = $this->removeAntiDebugging($deobfuscated);
            
            return $deobfuscated;
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * Reverse variable name randomization
     */
    private function reverseVariableRandomization(string $code): string
    {
        // This is a simplified approach - in a real implementation,
        // you'd need to maintain a mapping of original to randomized names
        // For now, we'll just clean up obvious patterns
        
        // Remove hex-based variable names that are likely randomized
        $code = preg_replace('/\$_[a-f0-9]{8}/', '$variable', $code);
        
        return $code;
    }

    /**
     * Decrypt base64 encoded strings
     */
    private function decryptStrings(string $code): string
    {
        return preg_replace_callback('/"([A-Za-z0-9+\/=]{20,})"/', function($matches) {
            $decoded = base64_decode($matches[1]);
            if ($decoded !== false && strlen($decoded) > 0) {
                return '"' . $decoded . '"';
            }
            return $matches[0]; // Return original if decoding fails
        }, $code);
    }

    /**
     * Remove dead code injections
     */
    private function removeDeadCode(string $code): string
    {
        $deadCodePatterns = [
            '/\$dummy = "dead_code";\s*/',
            '/if\s*\(\s*false\s*\)\s*\{\s*\$never\s*=\s*"executed";\s*\}\s*/',
            '/for\s*\(\$i\s*=\s*0;\s*\$i\s*<\s*0;\s*\$i\+\+\)\s*\{\s*\$loop\s*=\s*"never";\s*\}\s*/',
            '/if\s*\(\s*true\s*\)\s*\{([^}]+)\}\s*/s' // Remove wrapper if statements
        ];
        
        foreach ($deadCodePatterns as $pattern) {
            $code = preg_replace($pattern, '$1', $code);
        }
        
        return $code;
    }

    /**
     * Remove anti-debugging code
     */
    private function removeAntiDebugging(string $code): string
    {
        $antiDebugPatterns = [
            '/if\s*\(\s*function_exists\s*\(\s*"xdebug_get_trace"\s*\)\s*\)\s*\{\s*return;\s*\}\s*/',
            '/if\s*\(\s*extension_loaded\s*\(\s*"xdebug"\s*\)\s*\)\s*\{\s*return;\s*\}\s*/'
        ];
        
        foreach ($antiDebugPatterns as $pattern) {
            $code = preg_replace($pattern, '', $code);
        }
        
        return $code;
    }

    /**
     * Generate output path for deobfuscated file
     */
    private function generateDeobfuscatedOutputPath(string $inputPath): string
    {
        $pathInfo = pathinfo($inputPath);
        $directory = $pathInfo['dirname'];
        $filename = $pathInfo['filename'];
        $extension = $pathInfo['extension'];
        
        // Remove _obfuscated suffix if present
        $filename = preg_replace('/_obfuscated$/', '', $filename);
        
        return $directory . DIRECTORY_SEPARATOR . $filename . '_deobfuscated.' . $extension;
    }

    /**
     * Analyze obfuscation level of a file
     */
    public function analyzeObfuscationLevel(string $filePath): array
    {
        $this->checkLicense();
        
        if (!File::exists($filePath)) {
            throw new \Exception("File not found: {$filePath}");
        }
        
        $code = File::get($filePath);
        $analysis = [
            'is_obfuscated' => false,
            'obfuscation_type' => 'none',
            'confidence' => 0,
            'techniques_detected' => [],
            'estimated_original_size' => 0
        ];
        
        // Check for our wrapper
        if (strpos($code, '// Obfuscated PHP Code - Generated by LaravelObfuscator') !== false) {
            $analysis['is_obfuscated'] = true;
            $analysis['obfuscation_type'] = 'laravel_obfuscator';
            $analysis['confidence'] = 95;
            $analysis['techniques_detected'][] = 'base64_reverse';
        }
        
        // Check for other obfuscation patterns
        if (preg_match('/\$_[a-f0-9]{8}/', $code)) {
            $analysis['techniques_detected'][] = 'variable_randomization';
            $analysis['confidence'] += 20;
        }
        
        if (preg_match('/"[A-Za-z0-9+\/=]{20,}"/', $code)) {
            $analysis['techniques_detected'][] = 'string_encryption';
            $analysis['confidence'] += 15;
        }
        
        if (strpos($code, 'if(function_exists("xdebug_get_trace"))') !== false) {
            $analysis['techniques_detected'][] = 'anti_debugging';
            $analysis['confidence'] += 10;
        }
        
        // Estimate original size
        $analysis['estimated_original_size'] = $this->estimateOriginalSize($code);
        
        return $analysis;
    }

    /**
     * Estimate original file size
     */
    private function estimateOriginalSize(string $code): int
    {
        // Remove wrapper code
        $code = preg_replace('/<\?php.*?\$obfuscated = "[^"]+";.*?\?>/s', '', $code);
        
        // Remove dead code
        $code = $this->removeDeadCode($code);
        
        // Remove anti-debugging
        $code = $this->removeAntiDebugging($code);
        
        return strlen($code);
    }

    /**
     * Batch deobfuscate multiple files
     */
    public function deobfuscateDirectory(string $directoryPath): array
    {
        $this->checkLicense();
        
        $results = [];
        $files = File::allFiles($directoryPath);
        
        foreach ($files as $file) {
            if ($file->getExtension() === 'php') {
                $filePath = $file->getPathname();
                
                try {
                    $outputPath = $this->deobfuscateFile($filePath);
                    $results[] = [
                        'input' => $filePath,
                        'output' => $outputPath,
                        'status' => 'success'
                    ];
                } catch (\Exception $e) {
                    $results[] = [
                        'input' => $filePath,
                        'output' => null,
                        'status' => 'error',
                        'message' => $e->getMessage()
                    ];
                }
            }
        }
        
        return $results;
    }
}
