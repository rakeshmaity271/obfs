<?php

namespace LaravelObfuscator\LaravelObfuscator\Services;

use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;

class ObfuscatorService
{
    /**
     * Obfuscate a PHP code string
     */
    public function obfuscateString(string $sourceCode): string
    {
        // Simple obfuscation: base64 encode and reverse
        $encoded = base64_encode($sourceCode);
        $reversed = strrev($encoded);
        return $reversed;
    }
    
    /**
     * Deobfuscate an obfuscated string
     */
    public function deobfuscateString(string $obfuscatedCode): string
    {
        // Reverse the obfuscation process
        $reversed = strrev($obfuscatedCode);
        $decoded = base64_decode($reversed);
        return $decoded;
    }
    
    /**
     * Obfuscate a PHP file
     */
    public function obfuscateFile(string $inputFile, string $outputFile, bool $backup = false): bool
    {
        try {
            if (!File::exists($inputFile)) {
                throw new \Exception("Input file not found: {$inputFile}");
            }
            
            $sourceCode = File::get($inputFile);
            $obfuscatedCode = $this->obfuscateString($sourceCode);
            
            // Create wrapper code that deobfuscates and executes
            $wrapperCode = $this->createWrapperCode($obfuscatedCode);
            
            if (File::put($outputFile, $wrapperCode) === false) {
                throw new \Exception("Failed to write output file: {$outputFile}");
            }
            
            // Create backup if requested
            if ($backup) {
                $this->createBackup($inputFile);
            }
            
            return true;
        } catch (\Exception $e) {
            \Log::error('Obfuscation error: ' . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Obfuscate all PHP files in a directory
     */
    public function obfuscateDirectory(string $directoryPath, bool $backup = false): array
    {
        $results = [];
        $files = File::allFiles($directoryPath);
        
        foreach ($files as $file) {
            if ($file->getExtension() === 'php') {
                $filePath = $file->getPathname();
                $outputPath = $this->generateOutputPath($filePath);
                
                try {
                    $this->obfuscateFile($filePath, $outputPath, $backup);
                    $results[] = [
                        'input' => $filePath,
                        'output' => $outputPath,
                        'status' => 'success'
                    ];
                } catch (\Exception $e) {
                    $results[] = [
                        'input' => $filePath,
                        'output' => $outputPath,
                        'status' => 'error',
                        'message' => $e->getMessage()
                    ];
                }
            }
        }
        
        return $results;
    }
    
    /**
     * Generate obfuscated code with advanced techniques
     */
    public function generateAdvancedObfuscatedCode(string $sourceCode): string
    {
        // Remove comments and extra whitespace
        $cleaned = preg_replace('/\/\*.*?\*\//s', '', $sourceCode);
        $cleaned = preg_replace('/\/\/.*$/m', '', $cleaned);
        $cleaned = preg_replace('/\s+/', ' ', $cleaned);
        
        // Basic variable name obfuscation
        $obfuscated = $this->obfuscateString($cleaned);
        
        return $obfuscated;
    }
    
    /**
     * Create backup of original file
     */
    private function createBackup(string $filePath): void
    {
        $backupDir = storage_path('app/obfuscator_backups');
        if (!File::exists($backupDir)) {
            File::makeDirectory($backupDir, 0755, true);
        }
        
        $backupFileName = 'backup_' . time() . '_' . basename($filePath);
        $backupPath = $backupDir . DIRECTORY_SEPARATOR . $backupFileName;
        
        File::copy($filePath, $backupPath);
    }
    
    /**
     * Generate output file path for obfuscated file
     */
    private function generateOutputPath(string $inputPath): string
    {
        $pathInfo = pathinfo($inputPath);
        $directory = $pathInfo['dirname'];
        $filename = $pathInfo['filename'];
        $extension = $pathInfo['extension'];
        
        return $directory . DIRECTORY_SEPARATOR . $filename . '_obfuscated.' . $extension;
    }
    
    /**
     * Create wrapper code that deobfuscates and executes the original code
     */
    private function createWrapperCode(string $obfuscatedCode): string
    {
        $wrapper = '<?php' . "\n";
        $wrapper .= '// Obfuscated PHP Code - Generated by LaravelObfuscator' . "\n";
        $wrapper .= '$obfuscated = "' . addslashes($obfuscatedCode) . '";' . "\n";
        $wrapper .= '$reversed = strrev($obfuscated);' . "\n";
        $wrapper .= '$decoded = base64_decode($reversed);' . "\n";
        $wrapper .= 'if (substr($decoded, 0, 5) === "<?php") {' . "\n";
        $wrapper .= '    $decoded = substr($decoded, 5);' . "\n";
        $wrapper .= '}' . "\n";
        $wrapper .= 'if (substr($decoded, -2) === "?>") {' . "\n";
        $wrapper .= '    $decoded = substr($decoded, 0, -2);' . "\n";
        $wrapper .= '}' . "\n";
        $wrapper .= 'eval($decoded);' . "\n";
        $wrapper .= '?>';
        
        return $wrapper;
    }
}
